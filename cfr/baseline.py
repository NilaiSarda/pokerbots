"""
==================================================
    Filename:   baseline.py

 Description:   Useful general functions

     Version:   1.0
     Created:   2017-01-19
    Revision:   none
    Compiler:   python 3.5

      Author:   David Amirault,
                Faraaz Nadeem,
                Nilai Sarda,
                Arman Talkar
==================================================
"""

import discard


SUITS = ['c', 'd', 'h', 's']
VALUES = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
EVBUCKETS = (((0.42636530646328563, 0.430063864580571, 0.4349600211458402, 0.43993935839410403, 0.4452386442241181, 0.4519566659296927, 0.4562982857521801, 0.4613341562062619, 0.4638049901510177, 0.4683700440528634, 0.47383944038769377, 0.4752573785538145, 0.47880838422181876, 0.48000110705192073, 0.488922909663749, 0.49070214812439883, 0.4916917759659695, 0.4949244167483237, 0.4969240454600678, 0.5033156719650771, 0.5056871247498332, 0.5075115861365501, 0.5095798337876765, 0.5121225528149541, 0.5167403136582706, 0.51986276434962, 0.5212370175166641, 0.5250834636586476, 0.5269955783104492, 0.5281517341998806, 0.5319023237495076, 0.5331549097623706, 0.5358728674924048, 0.5398476903036173, 0.5453668166578437, 0.547964477270729, 0.5546970112421168, 0.5599806298634071, 0.5719843505134303),
(0.26991978609625666, 0.2985930171964565, 0.3206841938549256, 0.33941459502806737, 0.35459243598778484, 0.3672964088052932, 0.37885018545395904, 0.3897191941758792, 0.4005775577557756, 0.4139843003696474, 0.43199757134183364, 0.453872437357631, 0.47800694302634267, 0.5015217007762879, 0.5344639984861387, 0.5761166253101737, 0.6146645865834633, 0.6676262083780881, 0.7328358208955223),
(0.10717948717948718, 0.15478260869565216, 0.19740634005763688, 0.23856502242152466, 0.2787286063569682, 0.3215712383488682, 0.35823754789272033, 0.39178515007898895, 0.4307479224376731, 0.4641245487364621, 0.5061224489795918, 0.5531983730819006, 0.5957142857142858, 0.6420988158432013, 0.6855834328952608, 0.7241539605801414, 0.7815557729941291, 0.8505425846760933, 0.9027128157156221),
(0.023243243243243242, 0.04655493482309125, 0.06953179594689028, 0.09323934636334508, 0.11733837111670865, 0.14158163265306123, 0.16555924695459578, 0.19065656565656566, 0.21514629948364888, 0.23873409012727898, 0.2636018557570645, 0.2887801204819277, 0.31328751431844215, 0.33863134657836647, 0.3659680088251517, 0.39136490250696376, 0.4147651006711409, 0.44129554655870445, 0.46794871794871795, 0.4949596774193548, 0.5225, 0.5499306518723994, 0.57475317348378, 0.5987654320987654, 0.6259124087591241, 0.6564046179219352, 0.683206106870229, 0.7088186356073212, 0.7356363636363636, 0.7636292834890965, 0.7864894194248507, 0.8108949416342413, 0.8402707275803722, 0.8673066064370413, 0.8903095558546433, 0.9097387173396675, 0.9390243902439024, 0.9631901840490797, 0.9864300626304802)),
((),
(0.26995429555540834, 0.30545300490225746, 0.3327756959314775, 0.3540135865797865, 0.3738476997684477, 0.3910770066548961, 0.4070235609901581, 0.41898737216113696, 0.43083345478773244, 0.44224924012158057, 0.4528057087252676, 0.46420270088556775, 0.47681041497152155, 0.49054982817869414, 0.5054127198917456, 0.5225889845203191, 0.5395256916996047, 0.5692695214105793, 0.6208651399491094),
(0.1469673405909798, 0.17857142857142858, 0.2060744611365121, 0.2273838630806846, 0.24700347261117958, 0.2668735758623399, 0.28661158895427796, 0.30586206896551726, 0.32474554707379133, 0.3450920245398773, 0.3658388855239249, 0.38865379529225075, 0.4157608695652174, 0.44565217391304346, 0.48158123370981754, 0.5235562310030395, 0.5711805555555556, 0.6350662589194699, 0.718990261404408)))


def totuple(strcard):
    """Ac -> (0, 12)"""
    return (SUITS.index(strcard[1]), VALUES.index(strcard[0]))


def tostr(tuplecard):
    """(0, 12) -> Ac"""
    return VALUES[tuplecard[1]] + SUITS[tuplecard[0]]


def flushcode(board, hole):
    """2-, 2a, 2b, 2ab, 3, 3a, 3b, 3ab, 4, 4a, 4b, 4ab, 5, 5a, 5b, 5ab, 2a2b"""
    code = 0
    distro = discard.suitdistro(board)
    potential = max(distro)
    if potential >= 2:
        code = 4 * (potential - 2)
        suit = distro.index(potential)
        if len(board) < 5 or (len(board) == 5 and potential + int(hole[0][0] == suit) + int(hole[1][0] == suit) >= 5):
            suit2 = 3 - distro[::-1].index(potential)
            if len(board) == 4 and suit != suit2:
                if (hole[0][0] == suit and hole[1][0] == suit2) or (hole[0][0] == suit2 and hole[1][0] == suit):
                    code = 16
                else:
                    if hole[0][0] == suit or hole[0][0] == suit2:
                        code += 1 + int(hole[0][1] > hole[1][1])
                    if hole[1][0] == suit or hole[1][0] == suit2:
                        code += 1 + int(hole[0][1] < hole[1][1])
            else:
                if hole[0][0] == suit:
                    code += 1 + int(hole[0][1] > hole[1][1])
                if hole[1][0] == suit:
                    code += 1 + int(hole[0][1] < hole[1][1])
    return code


def preflopkeygen(hole):
    """Keys for preflop table"""
    return (tuple(sorted([c[1] for c in hole])), hole[0][0] == hole[1][0])


def evkeygen(board, hole):
    """Keys for ev table"""
    return (tuple(sorted([c[1] for c in board])), tuple(sorted([c[1] for c in hole])), flushcode(board, hole))


def preflopexp(hole, preflop):
    """Gets hole ev"""
    key = preflopkeygen(hole)
    return preflop[key][0] / preflop[key][1]


def evexp(board, hole, ev):
    """Gets hand ev"""
    key = evkeygen(board, hole)
    if key in ev:
        return ev[key][0] / ev[key][1]
    return 0.5


def drawing(board, hole):
    """Drawing hand"""
    straight = discard.straightpotential(board, hole)
    flush = max(discard.suitdistro(board + hole))
    return int(flush == 4 or (straight > 3 and straight < 5))


def findnode(street, player, exp, stack, board, hole):
    """Gets index of node"""
    opp = 1 - player
    nodeind = 400 * street
    if street == 0 or street == 3:
        for ind in range(39):
            if exp <= EVBUCKETS[0][street][ind]:
                nodeind += 10 * ind
                break
            if ind == 38:
                nodeind += 390
    else:
        bucket = drawing(board, hole)
        nodeind += 200 * bucket
        for ind in range(19):
            if exp <= EVBUCKETS[bucket][street][ind]:
                nodeind += 10 * ind
                break
            if ind == 18:
                nodeind += 190
    if stack[player] - stack[opp] > 90:
        nodeind += 3
    elif stack[player] - stack[opp] > 40:
        nodeind += 2
    elif stack[player] - stack[opp] > 10:
        nodeind += 1
    if stack[opp] < 110:
        nodeind += 6
    elif stack[opp] < 160:
        nodeind += 3
    elif stack[opp] < 190:
        nodeind += 1
    return nodeind
